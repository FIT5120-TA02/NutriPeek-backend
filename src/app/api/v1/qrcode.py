from typing import Optional

from fastapi import APIRouter, File, Form, HTTPException, Request, UploadFile, status

from src.app.core.config import settings
from src.app.core.exceptions.custom import (
    InvalidImageError,
    ModelLoadError,
    ProcessingError,
)
from src.app.core.temp_storage import FileStatus, temp_storage
from src.app.schemas.food_detection import FoodDetectionResponse
from src.app.schemas.qrcode import (
    FileStatusResponse,
    GenerateUploadQRResponse,
    UploadImageResponse,
)
from src.app.services.food_detection_service import food_detection_service
from src.app.services.qrcode_service import qrcode_service

router = APIRouter(prefix="/qrcode", tags=["qrcode"])


@router.post("/generate", response_model=GenerateUploadQRResponse)
def generate_upload_qr(
    request: Request, expiry_seconds: Optional[int] = Form(300, ge=60, le=3600)
):
    """Generate a QR code with a shortcode for uploading images.

    Args:
        request: FastAPI request object
        expiry_seconds: Time in seconds before the upload link expires (60-3600 seconds)

    Returns:
        GenerateUploadQRResponse containing the upload URL and QR code as base64

    Raises:
        HTTPException: If QR code generation fails
    """
    try:
        # Use the base URL from settings instead of request object
        base_url = settings.QR_CODE_BASE_URL

        shortcode, upload_url, qrcode_base64 = qrcode_service.generate_upload_qr(
            base_url, expiry_seconds=expiry_seconds
        )

        return GenerateUploadQRResponse(
            upload_url=upload_url,
            qrcode_base64=qrcode_base64,
            expires_in_seconds=expiry_seconds,
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate QR code: {str(e)}",
        )


@router.post("/upload/{shortcode}", response_model=UploadImageResponse)
async def upload_image(shortcode: str, file: UploadFile = File(...)):
    """Upload an image file associated with a shortcode.

    Args:
        shortcode: Unique identifier generated by generate_upload_qr
        file: Uploaded image file (JPEG or PNG)

    Returns:
        UploadImageResponse indicating success

    Raises:
        HTTPException: If upload fails, shortcode not found, or invalid file
    """
    if not temp_storage.exists(shortcode):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Invalid or expired shortcode"
        )

    # Check the status to ensure it's waiting for upload
    current_status, error = temp_storage.get_status(shortcode)
    if current_status != FileStatus.AWAITING_UPLOAD:
        if current_status == FileStatus.EXPIRED:
            raise HTTPException(
                status_code=status.HTTP_410_GONE, detail="Shortcode has expired"
            )
        elif current_status == FileStatus.UPLOADED:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="File already uploaded for this shortcode",
            )

    try:
        content = await file.read()
        success, error_msg = qrcode_service.save_uploaded_file(shortcode, content)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST, detail=error_msg
            )

        return UploadImageResponse(message="Upload successful", shortcode=shortcode)
    except HTTPException:
        # Re-raise HTTP exceptions without modifying them
        raise
    except Exception as e:
        # Mark the upload as failed in the storage
        qrcode_service.mark_as_failed(shortcode, str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process upload: {str(e)}",
        )


@router.get("/status/{shortcode}", response_model=FileStatusResponse)
async def get_file_status(shortcode: str):
    """Get the current status of an uploaded file.

    Args:
        shortcode: Unique identifier for the upload

    Returns:
        FileStatusResponse containing the file status and any error information

    Raises:
        HTTPException: If shortcode not found
    """
    status_value, error = qrcode_service.get_file_status(shortcode)

    if status_value is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Shortcode not found"
        )

    return FileStatusResponse(
        shortcode=shortcode, status=status_value.value, error=error
    )


@router.get("/result/{shortcode}", response_model=FoodDetectionResponse)
async def get_result(shortcode: str):
    """Process the uploaded image and return food detection results.

    The image must have been previously uploaded via the /upload endpoint.
    This is a one-time use endpoint - the image is deleted after processing.

    Args:
        shortcode: Unique identifier for the uploaded image

    Returns:
        FoodDetectionResponse containing detected food items

    Raises:
        HTTPException: For various error conditions (not found, processing error, etc.)
    """
    # First check if shortcode exists
    if not temp_storage.exists(shortcode):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Shortcode not found or expired",
        )

    # Check if there's a file associated with the shortcode and it's in the right state
    current_status, error = temp_storage.get_status(shortcode)
    if current_status == FileStatus.AWAITING_UPLOAD:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No file has been uploaded for this shortcode",
        )
    elif current_status == FileStatus.EXPIRED:
        raise HTTPException(
            status_code=status.HTTP_410_GONE, detail="Shortcode has expired"
        )
    elif current_status == FileStatus.FAILED:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"File upload failed: {error}",
        )
    elif current_status == FileStatus.PROCESSING:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="File is already being processed",
        )
    elif current_status == FileStatus.PROCESSED:
        raise HTTPException(
            status_code=status.HTTP_410_GONE,
            detail="This file has already been processed",
        )

    # Mark the file as being processed
    qrcode_service.mark_as_processing(shortcode)

    try:
        # Get the file data
        file_data = temp_storage.get_file(shortcode)
        if not file_data:
            # Handle the case where file data is missing
            qrcode_service.mark_as_failed(shortcode, "File data not found")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND, detail="File data not found"
            )

        try:
            # Process the image
            (
                detections,
                processing_time_ms,
                width,
                height,
            ) = await food_detection_service.process_image(file_data)

            # Mark as processed and clean up
            qrcode_service.mark_as_processed(shortcode)
            temp_storage.delete_entry(shortcode)  # One-time use, delete after use

            # Return detection results
            return FoodDetectionResponse(
                detected_items=detections,
                processing_time_ms=processing_time_ms,
                image_width=width,
                image_height=height,
            )
        except InvalidImageError as e:
            qrcode_service.mark_as_failed(shortcode, str(e))
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=str(e),
            )
        except (ModelLoadError, ProcessingError) as e:
            qrcode_service.mark_as_failed(shortcode, str(e))
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=str(e),
            )
    except HTTPException:
        # Re-raise HTTP exceptions without modifying them
        raise
    except Exception as e:
        qrcode_service.mark_as_failed(shortcode, f"Unexpected error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to process image: {str(e)}",
        )
